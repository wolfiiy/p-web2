/// ETML
/// Author: Sebastien Tille
/// Date: December 6th, 2025
/// Description: This partial defines Material 3 inspired input fields. The
/// basis was inpired by the work of GitHub user LeonGeldsch
/// See https://github.com/LeonGeldsch/css_material_input
/// Note: The code has not been re-organized following the Sass convertion,
/// hence the "messy"-looking code.

// Base input
.md-input {
  // Release date picker
  &.small {
    max-width: $input-small-max-width;
  }

  // Excerpt text area
  &.large {
    max-width: $input-large-max-width;
  }
}

// Proper Material 3 inspired inputs (i.e. has a label animation)
.md-outlined-input,
.md-outlined-textarea {
  position: relative;
}

// Proper Material 3 inspired inputs (i.e. has a label animation)
.md-outlined-input input {
  height: 3rem;
  border-radius: $border-radius-small;
  border: none;
  background-color: transparent;
  padding-left: 2ch;
  padding-right: 2ch;
  font-size: 1rem;
  transition: $transision-shortest $main-ease;
}

.md-outlined-input.primary input {
  color: var(--md-sys-color-on-surface);
  outline: $md-border-width solid var(--md-sys-color-secondary-container);
}

.md-outlined-input.on-surface-container input {
  color: var(--md-sys-color-on-surface);
  outline: $md-border-width solid var(--md-sys-color-on-secondary-fixed-variant);
}

.md-outlined-input.on-surface-container label {
  background-color: var(--md-sys-color-surface-container);
  color: var(--md-sys-color-on-surface-variant);
}

.md-outlined-input.small input {
  width: $input-small-max-width;
}

.md-outlined-input.large input {
  width: $input-large-max-width;
}

.md-outlined-input label {
  position: absolute;
  top: 50%;
  left: 1ch;
  transform: translateY(-50%);
  text-align: center;
  transition: $transition-short $main-ease;
  font-size: 1rem;
  pointer-events: none;
  padding: 0 5px;
}

.md-outlined-input input:not(:placeholder-shown) ~ label,
.md-outlined-input input:focus ~ label {
  top: 0px;
  left: 10px;
  font-size: 0.8rem;
}

.md-outlined-input input:focus {
  outline: $md-border-width solid var(--md-sys-color-secondary) !important;
}

.md-input:hover,
.md-outlined-input input:hover,
.md-textarea:hover {
  outline: $md-border-width solid var(--md-sys-color-outline);
  transition: $transition-short $main-ease;
}
.md-outlined-input input:focus ~ label {
  color: var(--md-sys-color-secondary) !important;
}

.md-input.secondary {
  background-color: var(--md-sys-color-surface-container);
  border: none;
  border-radius: $border-radius-large;
  color: var(--md-sys-color-on-surface);
  outline: $md-border-width solid var(--md-sys-color-on-secondary-fixed-variant);
  padding: 1.25ch 2ch;
}

.md-outlined-input input {
  height: 3rem;
  border-radius: $border-radius-small;
  border: none;
  background-color: transparent;
  padding-left: 2ch;
  padding-right: 2ch;
  font-size: 1rem;
  transition: .1s $main-ease;
}

.md-outlined-input.primary input {
  color: var(--md-sys-color-on-surface);
  outline: $md-border-width solid var(--md-sys-color-secondary-container);
}

.md-outlined-input.on-surface-container input {
  color: var(--md-sys-color-on-surface);
  outline: $md-border-width solid var(--md-sys-color-on-secondary-fixed-variant);
}

.md-outlined-input.on-surface-container label {
  background-color: var(--md-sys-color-surface-container);
  color: var(--md-sys-color-on-surface-variant);
}

.md-outlined-input.small input {
  width: 10ch;
}

.md-outlined-input.large input {
  width: 35ch;
}

.md-outlined-input label {
  position: absolute;
  top: 50%;
  left: 1ch;
  transform: translateY(-50%);
  text-align: center;
  transition: $transition-short $main-ease;
  font-size: 1rem;
  pointer-events: none;
  padding: 0 5px;
}

.md-outlined-input input:not(:placeholder-shown) ~ label,
.md-outlined-input input:focus ~ label {
  top: 0px;
  left: 10px;
  font-size: 0.8rem;
}

.md-outlined-input input:focus {
  outline: $md-border-width solid var(--md-sys-color-secondary) !important;
}

.md-outlined-input input:focus ~ label {
  color: var(--md-sys-color-secondary) !important;
}

label[for] {
  pointer-events: none;
}